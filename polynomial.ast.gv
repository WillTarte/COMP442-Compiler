digraph AST {
Start;
Start -> Prog;
Prog;
Prog -> ReptProg0;
Prog -> ReptProg1;
Prog -> Main;
Prog -> FuncBody;
ReptProg0;
ReptProg0 -> ClassDecl;
ReptProg0 -> ReptProg0;
ReptProg0 -> FuncDef;
ReptProg0 -> ReptProg1;
ReptProg0 -> "{";
ReptProg0 -> OptFuncBody;
ReptProg0 -> ReptFuncBody;
ReptProg0 -> CloseCurly;
ReptProg1;
Main;
FuncBody;
ClassDecl;
ClassDecl -> "class";
ClassDecl -> Id;
ClassDecl -> OptClassDecl;
ClassDecl -> OpenCurly;
ClassDecl -> ReptClassDecl;
ClassDecl -> CloseCurly;
ClassDecl -> SemiColon;
ClassDecl -> ClassDecl;
ClassDecl -> ReptProg0;
ReptProg0;
FuncDef;
FuncDef -> FuncHead;
FuncDef -> FuncBody;
FuncDef -> FuncDef;
FuncDef -> ReptProg1;
ReptProg1;
"{";
"{" -> "var";
"{" -> OpenCurly;
"{" -> ReptOptFuncBody;
"{" -> CloseCurly;
"{" -> Statement;
"{" -> ReptFuncBody;
OptFuncBody;
ReptFuncBody;
CloseCurly;
"class";
"class" -> Visibility;
"class" -> MemberDecl;
"class" -> ReptClassDecl;
Id;
OptClassDecl;
OpenCurly;
ReptClassDecl;
CloseCurly;
SemiColon;
ClassDecl;
ClassDecl -> "class";
ClassDecl -> Id;
ClassDecl -> OptClassDecl;
ClassDecl -> OpenCurly;
ClassDecl -> ReptClassDecl;
ClassDecl -> CloseCurly;
ClassDecl -> SemiColon;
ClassDecl -> ClassDecl;
ClassDecl -> ReptProg0;
ReptProg0;
FuncHead;
FuncHead -> "func";
FuncHead -> Id;
FuncHead -> FuncHeadAmb1;
FuncHead -> "{";
FuncHead -> OptFuncBody;
FuncHead -> ReptFuncBody;
FuncHead -> CloseCurly;
FuncBody;
FuncDef;
FuncDef -> FuncHead;
FuncDef -> FuncBody;
FuncDef -> FuncDef;
FuncDef -> ReptProg1;
ReptProg1;
"var";
"var" -> VarDecl;
"var" -> ReptOptFuncBody;
OpenCurly;
ReptOptFuncBody;
CloseCurly;
Statement;
Statement -> "f1";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
Visibility;
Visibility -> "public";
Visibility -> FuncDecl;
MemberDecl;
ReptClassDecl;
"class";
"class" -> "inherits";
"class" -> Id;
"class" -> ReptOptClassDecl;
"class" -> Visibility;
"class" -> MemberDecl;
"class" -> ReptClassDecl;
Id;
OptClassDecl;
OpenCurly;
ReptClassDecl;
CloseCurly;
SemiColon;
ClassDecl;
ClassDecl -> "class";
ClassDecl -> Id;
ClassDecl -> OptClassDecl;
ClassDecl -> OpenCurly;
ClassDecl -> ReptClassDecl;
ClassDecl -> CloseCurly;
ClassDecl -> SemiColon;
ReptProg0;
"func";
"func" -> "::";
"func" -> Id;
"func" -> OpenParen;
"func" -> FuncParams;
"func" -> CloseParen;
"func" -> Colon;
"func" -> FuncHeadAmb2;
Id;
FuncHeadAmb1;
"{";
"{" -> Statement;
"{" -> ReptFuncBody;
OptFuncBody;
ReptFuncBody;
CloseCurly;
FuncHead;
FuncHead -> "func";
FuncHead -> Id;
FuncHead -> FuncHeadAmb1;
FuncHead -> "{";
FuncHead -> OptFuncBody;
FuncHead -> ReptFuncBody;
FuncHead -> CloseCurly;
FuncBody;
FuncDef;
FuncDef -> FuncHead;
FuncDef -> FuncBody;
FuncDef -> FuncDef;
FuncDef -> ReptProg1;
ReptProg1;
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
VarDecl -> VarDecl;
VarDecl -> ReptOptFuncBody;
ReptOptFuncBody;
"f1";
"f1" -> AssignOp;
"f1" -> Expr;
"f1" -> SemiColon;
StatementAmb1;
Statement;
Statement -> "f2";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"public";
FuncDecl;
FuncDecl -> "func";
FuncDecl -> Id;
FuncDecl -> OpenParen;
FuncDecl -> FuncParams;
FuncDecl -> CloseParen;
FuncDecl -> Colon;
FuncDecl -> FuncDeclAmb1;
"inherits";
Id;
ReptOptClassDecl;
Visibility;
Visibility -> "private";
Visibility -> VarDecl;
Visibility -> Visibility;
Visibility -> MemberDecl;
Visibility -> ReptClassDecl;
MemberDecl;
ReptClassDecl;
"class";
"class" -> "inherits";
"class" -> Id;
"class" -> ReptOptClassDecl;
"class" -> Visibility;
"class" -> MemberDecl;
"class" -> ReptClassDecl;
Id;
OptClassDecl;
OpenCurly;
ReptClassDecl;
CloseCurly;
SemiColon;
"::";
"::" -> Type;
"::" -> Id;
"::" -> ReptFuncParams0;
"::" -> ReptFuncParams1;
"::" -> Type;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncHeadAmb2;
Statement;
Statement -> "return";
Statement -> OpenParen;
Statement -> Expr;
Statement -> CloseParen;
Statement -> SemiColon;
ReptFuncBody;
"func";
"func" -> "::";
"func" -> Id;
"func" -> OpenParen;
"func" -> FuncParams;
"func" -> CloseParen;
"func" -> Colon;
"func" -> FuncHeadAmb2;
Id;
FuncHeadAmb1;
"{";
"{" -> "var";
"{" -> OpenCurly;
"{" -> ReptOptFuncBody;
"{" -> CloseCurly;
"{" -> Statement;
"{" -> ReptFuncBody;
OptFuncBody;
ReptFuncBody;
CloseCurly;
FuncHead;
FuncHead -> "func";
FuncHead -> Id;
FuncHead -> FuncHeadAmb1;
FuncHead -> "{";
FuncHead -> OptFuncBody;
FuncHead -> ReptFuncBody;
FuncHead -> CloseCurly;
FuncBody;
FuncDef;
FuncDef -> FuncHead;
FuncDef -> FuncBody;
FuncDef -> FuncDef;
FuncDef -> ReptProg1;
ReptProg1;
Type;
Type -> "linear";
Id;
ReptVarDecl;
SemiColon;
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
VarDecl -> VarDecl;
VarDecl -> ReptOptFuncBody;
ReptOptFuncBody;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
"f2";
"f2" -> AssignOp;
"f2" -> Expr;
"f2" -> SemiColon;
StatementAmb1;
Statement;
Statement -> "counter";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"func";
"func" -> Type;
"func" -> Id;
"func" -> ReptFuncParams0;
"func" -> ReptFuncParams1;
"func" -> Type;
"func" -> SemiColon;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncDeclAmb1;
"private";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
Visibility;
Visibility -> "private";
Visibility -> VarDecl;
Visibility -> Visibility;
Visibility -> MemberDecl;
Visibility -> ReptClassDecl;
MemberDecl;
ReptClassDecl;
"inherits";
Id;
ReptOptClassDecl;
Visibility;
Visibility -> "private";
Visibility -> VarDecl;
Visibility -> Visibility;
Visibility -> MemberDecl;
Visibility -> ReptClassDecl;
MemberDecl;
ReptClassDecl;
Type;
Type -> "float";
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "float";
"return";
"return" -> ArithExpr;
"return" -> ExprAmb1;
OpenParen;
Expr;
CloseParen;
SemiColon;
"::";
"::" -> Type;
"::" -> Id;
"::" -> ReptFuncParams0;
"::" -> ReptFuncParams1;
"::" -> Type;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncHeadAmb2;
"var";
"var" -> VarDecl;
"var" -> ReptOptFuncBody;
OpenCurly;
ReptOptFuncBody;
CloseCurly;
Statement;
Statement -> "result";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"func";
"func" -> "::";
"func" -> Id;
"func" -> OpenParen;
"func" -> FuncParams;
"func" -> CloseParen;
"func" -> Colon;
"func" -> FuncHeadAmb2;
Id;
FuncHeadAmb1;
"{";
"{" -> "var";
"{" -> OpenCurly;
"{" -> ReptOptFuncBody;
"{" -> CloseCurly;
"{" -> Statement;
"{" -> ReptFuncBody;
OptFuncBody;
ReptFuncBody;
CloseCurly;
FuncHead;
FuncHead -> "func";
FuncHead -> Id;
FuncHead -> FuncHeadAmb1;
FuncHead -> "{";
FuncHead -> OptFuncBody;
FuncHead -> ReptFuncBody;
FuncHead -> CloseCurly;
FuncBody;
FuncDef;
FuncDef -> FuncHead;
FuncDef -> FuncBody;
ReptProg1;
"linear";
Type;
Type -> "quadratic";
Id;
ReptVarDecl;
SemiColon;
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
ReptOptFuncBody;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
"counter";
"counter" -> AssignOp;
"counter" -> Expr;
"counter" -> SemiColon;
StatementAmb1;
Statement;
Statement -> "while";
Statement -> OpenParen;
Statement -> RelExpr;
Statement -> CloseParen;
Statement -> StatBlock;
Statement -> SemiColon;
ReptFuncBody;
Type;
Type -> "float";
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "float";
SemiColon;
Type;
Type -> "float";
Id;
ReptVarDecl;
SemiColon;
"private";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
Visibility;
Visibility -> "public";
Visibility -> FuncDecl;
Visibility -> Visibility;
Visibility -> MemberDecl;
Visibility -> ReptClassDecl;
MemberDecl;
ReptClassDecl;
"private";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
Visibility;
Visibility -> "private";
Visibility -> VarDecl;
Visibility -> Visibility;
Visibility -> MemberDecl;
Visibility -> ReptClassDecl;
MemberDecl;
ReptClassDecl;
"float";
"float";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
Type;
Type -> "float";
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "float";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
ReptOptFuncBody;
"result";
"result" -> AssignOp;
"result" -> Expr;
"result" -> SemiColon;
StatementAmb1;
Statement;
Statement -> "result";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"::";
"::" -> Type;
"::" -> Id;
"::" -> ReptFuncParams0;
"::" -> ReptFuncParams1;
"::" -> Type;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncHeadAmb2;
"var";
"var" -> VarDecl;
"var" -> ReptOptFuncBody;
OpenCurly;
ReptOptFuncBody;
CloseCurly;
Statement;
Statement -> "result";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"func";
"func" -> "::";
"func" -> Id;
"func" -> OpenParen;
"func" -> FuncParams;
"func" -> CloseParen;
"func" -> Colon;
"func" -> FuncHeadAmb2;
Id;
FuncHeadAmb1;
"{";
"{" -> "var";
"{" -> OpenCurly;
"{" -> ReptOptFuncBody;
"{" -> CloseCurly;
"{" -> Statement;
"{" -> ReptFuncBody;
OptFuncBody;
ReptFuncBody;
CloseCurly;
FuncHead;
FuncHead -> "func";
FuncHead -> Id;
FuncHead -> FuncHeadAmb1;
FuncHead -> "{";
FuncHead -> OptFuncBody;
FuncHead -> ReptFuncBody;
FuncHead -> CloseCurly;
FuncBody;
"quadratic";
Type;
Type -> "integer";
Id;
ReptVarDecl;
SemiColon;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
"while";
"while" -> ArithExpr;
"while" -> RelOp;
"while" -> ArithExpr;
"while" -> "{";
"while" -> ReptStatBlock;
"while" -> CloseCurly;
OpenParen;
RelExpr;
CloseParen;
StatBlock;
SemiColon;
"float";
"float";
"float";
Type;
Type -> "float";
Id;
ReptVarDecl;
SemiColon;
"public";
FuncDecl;
FuncDecl -> "func";
FuncDecl -> Id;
FuncDecl -> OpenParen;
FuncDecl -> FuncParams;
FuncDecl -> CloseParen;
FuncDecl -> Colon;
FuncDecl -> FuncDeclAmb1;
Visibility;
Visibility -> "public";
Visibility -> FuncDecl;
MemberDecl;
ReptClassDecl;
Type;
Type -> "float";
Id;
ReptVarDecl;
SemiColon;
"private";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
Visibility;
Visibility -> "private";
Visibility -> VarDecl;
Visibility -> Visibility;
Visibility -> MemberDecl;
Visibility -> ReptClassDecl;
MemberDecl;
ReptClassDecl;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"float";
"float";
Type;
Type -> "float";
Id;
ReptVarDecl;
SemiColon;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
"result";
"result" -> AssignOp;
"result" -> Expr;
"result" -> SemiColon;
StatementAmb1;
Statement;
Statement -> "return";
Statement -> OpenParen;
Statement -> Expr;
Statement -> CloseParen;
Statement -> SemiColon;
ReptFuncBody;
Type;
Type -> "float";
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "float";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
ReptOptFuncBody;
"result";
"result" -> AssignOp;
"result" -> Expr;
"result" -> SemiColon;
StatementAmb1;
Statement;
Statement -> "result";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"::";
"::" -> Type;
"::" -> Id;
"::" -> ReptFuncParams0;
"::" -> ReptFuncParams1;
"::" -> Type;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncHeadAmb2;
"var";
"var" -> VarDecl;
"var" -> ReptOptFuncBody;
OpenCurly;
ReptOptFuncBody;
CloseCurly;
Statement;
Statement -> "new_function";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"func";
"func" -> "::";
"func" -> Id;
"func" -> OpenParen;
"func" -> FuncParams;
"func" -> CloseParen;
"func" -> Colon;
"func" -> FuncHeadAmb2;
Id;
FuncHeadAmb1;
"{";
"{" -> "var";
"{" -> OpenCurly;
"{" -> ReptOptFuncBody;
"{" -> CloseCurly;
"{" -> Statement;
"{" -> ReptFuncBody;
OptFuncBody;
ReptFuncBody;
CloseCurly;
"integer";
Factor;
Factor -> "f1";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ArithExpr -> "<=";
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
RelOp;
ArithExpr;
"{";
"{" -> Statement;
"{" -> ReptStatBlock;
ReptStatBlock;
CloseCurly;
"float";
"func";
"func" -> Type;
"func" -> Id;
"func" -> ReptFuncParams0;
"func" -> ReptFuncParams1;
"func" -> Type;
"func" -> SemiColon;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncDeclAmb1;
"public";
FuncDecl;
FuncDecl -> "func";
FuncDecl -> Id;
FuncDecl -> OpenParen;
FuncDecl -> FuncParams;
FuncDecl -> CloseParen;
FuncDecl -> Colon;
FuncDecl -> FuncDeclAmb1;
"float";
Type;
Type -> "float";
Id;
ReptVarDecl;
SemiColon;
"private";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
Visibility;
Visibility -> "public";
Visibility -> FuncDecl;
Visibility -> Visibility;
Visibility -> MemberDecl;
Visibility -> ReptClassDecl;
MemberDecl;
ReptClassDecl;
Factor;
Factor -> "0";
RightRecTerm;
"float";
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
"return";
"return" -> ArithExpr;
"return" -> ExprAmb1;
OpenParen;
Expr;
CloseParen;
SemiColon;
"float";
"float";
Type;
Type -> "float";
Id;
ReptVarDecl;
SemiColon;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
"result";
"result" -> AssignOp;
"result" -> Expr;
"result" -> SemiColon;
StatementAmb1;
Statement;
Statement -> "result";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
Type;
Type -> "float";
Type -> ",";
Type -> Type;
Type -> Id;
Type -> ReptFuncParamsTail;
Type -> ReptFuncParams1;
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "LINEAR";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
ReptOptFuncBody;
"new_function";
"new_function" -> ".";
"new_function" -> Id;
"new_function" -> StatementAmb1;
StatementAmb1;
Statement;
Statement -> "new_function";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"::";
"::" -> Type;
"::" -> Id;
"::" -> ReptFuncParams0;
"::" -> ReptFuncParams1;
"::" -> Type;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncHeadAmb2;
"var";
"var" -> VarDecl;
"var" -> ReptOptFuncBody;
OpenCurly;
ReptOptFuncBody;
CloseCurly;
Statement;
Statement -> "new_function";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
"f1";
"f1" -> ReptVariable;
"f1" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "f2";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"<=";
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
Statement;
Statement -> "write";
Statement -> OpenParen;
Statement -> Expr;
Statement -> CloseParen;
Statement -> SemiColon;
Statement -> Statement;
Statement -> ReptStatBlock;
ReptStatBlock;
Type;
Type -> "float";
Type -> ",";
Type -> Type;
Type -> Id;
Type -> ReptFuncParamsTail;
Type -> ReptFuncParams1;
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "LINEAR";
SemiColon;
"func";
"func" -> Type;
"func" -> Id;
"func" -> ReptFuncParams0;
"func" -> ReptFuncParams1;
"func" -> Type;
"func" -> SemiColon;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncDeclAmb1;
"float";
Type;
Type -> "float";
Id;
ReptVarDecl;
SemiColon;
"public";
FuncDecl;
FuncDecl -> "func";
FuncDecl -> Id;
FuncDecl -> OpenParen;
FuncDecl -> FuncParams;
FuncDecl -> CloseParen;
FuncDecl -> Colon;
FuncDecl -> FuncDeclAmb1;
Visibility;
Visibility -> "public";
Visibility -> FuncDecl;
MemberDecl;
ReptClassDecl;
"0";
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
"float";
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
"result";
"result" -> AssignOp;
"result" -> Expr;
"result" -> SemiColon;
StatementAmb1;
Statement;
Statement -> "return";
Statement -> OpenParen;
Statement -> Expr;
Statement -> CloseParen;
Statement -> SemiColon;
ReptFuncBody;
"float";
",";
"," -> "float";
Type;
Id;
ReptFuncParamsTail;
ReptFuncParams1;
"LINEAR";
Type;
Type -> "LINEAR";
Id;
ReptVarDecl;
SemiColon;
".";
"." -> AssignOp;
"." -> Expr;
"." -> SemiColon;
Id;
StatementAmb1;
"new_function";
"new_function" -> ".";
"new_function" -> Id;
"new_function" -> StatementAmb1;
StatementAmb1;
Statement;
Statement -> "return";
Statement -> OpenParen;
Statement -> Expr;
Statement -> CloseParen;
Statement -> SemiColon;
ReptFuncBody;
Type;
Type -> "float";
Type -> ",";
Type -> Type;
Type -> Id;
Type -> ReptFuncParamsTail;
Type -> ReptFuncParams1;
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "QUADRATIC";
VarDecl;
VarDecl -> Type;
VarDecl -> Id;
VarDecl -> ReptVarDecl;
VarDecl -> SemiColon;
ReptOptFuncBody;
"new_function";
"new_function" -> ".";
"new_function" -> Id;
"new_function" -> StatementAmb1;
StatementAmb1;
Statement;
Statement -> "new_function";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
ReptVariable;
ReptVariable -> ".";
ReptVariable -> Id;
ReptVariable -> FactorAmb1;
FactorAmb2;
"f2";
"f2" -> ReptVariable;
"f2" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "1";
RightRecTerm;
Factor;
Factor -> "counter";
Factor -> FactorAmb1;
RightRecTerm;
Factor;
Factor -> "10";
RightRecTerm;
"write";
"write" -> ArithExpr;
"write" -> ExprAmb1;
OpenParen;
Expr;
CloseParen;
SemiColon;
Statement;
Statement -> "write";
Statement -> OpenParen;
Statement -> Expr;
Statement -> CloseParen;
Statement -> SemiColon;
Statement -> Statement;
Statement -> ReptStatBlock;
ReptStatBlock;
"float";
",";
"," -> "float";
Type;
Id;
ReptFuncParamsTail;
ReptFuncParams1;
"LINEAR";
Type;
Type -> "float";
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "float";
SemiColon;
"float";
"func";
"func" -> Type;
"func" -> Id;
"func" -> ReptFuncParams0;
"func" -> ReptFuncParams1;
"func" -> Type;
"func" -> SemiColon;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncDeclAmb1;
"public";
FuncDecl;
FuncDecl -> "func";
FuncDecl -> Id;
FuncDecl -> OpenParen;
FuncDecl -> FuncParams;
FuncDecl -> CloseParen;
FuncDecl -> Colon;
FuncDecl -> FuncDeclAmb1;
Factor;
Factor -> "0.0";
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
Term -> AddOp;
Term -> Term;
Term -> RightRecArithExpr;
RightRecArithExpr;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
"return";
"return" -> ArithExpr;
"return" -> ExprAmb1;
OpenParen;
Expr;
CloseParen;
SemiColon;
"float";
"LINEAR";
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
".";
"." -> AssignOp;
"." -> Expr;
"." -> SemiColon;
Id;
StatementAmb1;
"return";
"return" -> ArithExpr;
"return" -> ExprAmb1;
OpenParen;
Expr;
CloseParen;
SemiColon;
"float";
",";
"," -> "float";
"," -> ",";
"," -> Type;
"," -> Id;
"," -> ReptFuncParamsTail;
"," -> ReptFuncParams1;
Type;
Id;
ReptFuncParamsTail;
ReptFuncParams1;
"QUADRATIC";
Type;
Type -> "QUADRATIC";
Id;
ReptVarDecl;
SemiColon;
".";
"." -> AssignOp;
"." -> Expr;
"." -> SemiColon;
Id;
StatementAmb1;
"new_function";
"new_function" -> ".";
"new_function" -> Id;
"new_function" -> StatementAmb1;
StatementAmb1;
Statement;
Statement -> "new_function";
Statement -> StatementAmb1;
Statement -> Statement;
Statement -> ReptFuncBody;
ReptFuncBody;
".";
"." -> "(";
"." -> Params;
"." -> CloseParen;
"." -> FactorAmb2;
Id;
FactorAmb1;
ReptVariable;
ReptVariable -> ".";
ReptVariable -> Id;
ReptVariable -> FactorAmb1;
FactorAmb2;
"1";
"counter";
"counter" -> ReptVariable;
"counter" -> FactorAmb2;
FactorAmb1;
"10";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
"write";
"write" -> ArithExpr;
"write" -> ExprAmb1;
OpenParen;
Expr;
CloseParen;
SemiColon;
Statement;
Statement -> "write";
Statement -> OpenParen;
Statement -> Expr;
Statement -> CloseParen;
Statement -> SemiColon;
ReptStatBlock;
"float";
"float";
"float";
Type;
Type -> "float";
Type -> ",";
Type -> Type;
Type -> Id;
Type -> ReptFuncParamsTail;
Type -> ReptFuncParams1;
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "QUADRATIC";
SemiColon;
"func";
"func" -> Type;
"func" -> Id;
"func" -> ReptFuncParams0;
"func" -> ReptFuncParams1;
"func" -> Type;
"func" -> SemiColon;
Id;
OpenParen;
FuncParams;
CloseParen;
Colon;
FuncDeclAmb1;
"0.0";
Factor;
Factor -> "a";
Factor -> FactorAmb1;
Factor -> MultOp;
Factor -> Factor;
Factor -> RightRecTerm;
RightRecTerm;
AddOp;
AddOp -> "+";
AddOp -> Factor;
AddOp -> RightRecTerm;
Term;
RightRecArithExpr;
Factor;
Factor -> "result";
Factor -> FactorAmb1;
RightRecTerm;
Factor;
Factor -> "a";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
Term -> AddOp;
Term -> Term;
Term -> RightRecArithExpr;
RightRecArithExpr;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
"float";
",";
"," -> "float";
Type;
Id;
ReptFuncParamsTail;
ReptFuncParams1;
"QUADRATIC";
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
".";
"." -> AssignOp;
"." -> Expr;
"." -> SemiColon;
Id;
StatementAmb1;
"new_function";
"new_function" -> ".";
"new_function" -> Id;
"new_function" -> StatementAmb1;
StatementAmb1;
Statement;
Statement -> "return";
Statement -> OpenParen;
Statement -> Expr;
Statement -> CloseParen;
Statement -> SemiColon;
ReptFuncBody;
"(";
"(" -> Expr;
"(" -> ReptParams;
Params;
CloseParen;
FactorAmb2;
".";
"." -> "(";
"." -> Params;
"." -> CloseParen;
"." -> FactorAmb2;
Id;
FactorAmb1;
ReptVariable;
FactorAmb2;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
"write";
"write" -> ArithExpr;
"write" -> ExprAmb1;
OpenParen;
Expr;
CloseParen;
SemiColon;
"float";
",";
"," -> "float";
"," -> ",";
"," -> Type;
"," -> Id;
"," -> ReptFuncParamsTail;
"," -> ReptFuncParams1;
Type;
Id;
ReptFuncParamsTail;
ReptFuncParams1;
"QUADRATIC";
Type;
Type -> "float";
Id;
ReptFuncParams0;
ReptFuncParams1;
Type;
Type -> "float";
SemiColon;
"a";
"a" -> ReptVariable;
"a" -> FactorAmb2;
FactorAmb1;
MultOp;
MultOp -> "*";
MultOp -> "x";
MultOp -> FactorAmb1;
Factor;
RightRecTerm;
"+";
Factor;
Factor -> "b";
Factor -> FactorAmb1;
RightRecTerm;
"result";
"result" -> ReptVariable;
"result" -> FactorAmb2;
FactorAmb1;
"a";
"a" -> ReptVariable;
"a" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "result";
Factor -> FactorAmb1;
Factor -> MultOp;
Factor -> Factor;
Factor -> RightRecTerm;
RightRecTerm;
AddOp;
AddOp -> "+";
AddOp -> Factor;
AddOp -> RightRecTerm;
Term;
RightRecArithExpr;
Term;
Term -> Factor;
Term -> RightRecTerm;
Term -> AddOp;
Term -> Term;
Term -> RightRecArithExpr;
RightRecArithExpr;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"float";
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
".";
"." -> AssignOp;
"." -> Expr;
"." -> SemiColon;
Id;
StatementAmb1;
"return";
"return" -> ArithExpr;
"return" -> ExprAmb1;
OpenParen;
Expr;
CloseParen;
SemiColon;
Expr;
Expr -> ArithExpr;
Expr -> ExprAmb1;
Expr -> ",";
Expr -> Expr;
Expr -> ReptParams;
ReptParams;
"(";
"(" -> Expr;
"(" -> ReptParams;
Params;
CloseParen;
FactorAmb2;
Factor;
Factor -> "counter";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
"float";
",";
"," -> "float";
Type;
Id;
ReptFuncParamsTail;
ReptFuncParams1;
"float";
"float";
ReptVariable;
FactorAmb2;
"*";
"x";
"x" -> ReptVariable;
"x" -> FactorAmb2;
FactorAmb1;
"b";
"b" -> ReptVariable;
"b" -> FactorAmb2;
FactorAmb1;
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
"result";
"result" -> ReptVariable;
"result" -> FactorAmb2;
FactorAmb1;
MultOp;
MultOp -> "*";
MultOp -> "x";
MultOp -> FactorAmb1;
Factor;
RightRecTerm;
"+";
Factor;
Factor -> "b";
Factor -> FactorAmb1;
RightRecTerm;
Factor;
Factor -> "result";
Factor -> FactorAmb1;
Factor -> MultOp;
Factor -> Factor;
Factor -> RightRecTerm;
RightRecTerm;
AddOp;
AddOp -> "+";
AddOp -> Factor;
AddOp -> RightRecTerm;
Term;
RightRecArithExpr;
Factor;
Factor -> "result";
Factor -> FactorAmb1;
RightRecTerm;
Factor;
Factor -> "A";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
Factor;
Factor -> "new_function";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
AssignOp;
AssignOp -> "=";
AssignOp -> ArithExpr;
AssignOp -> ExprAmb1;
Expr;
SemiColon;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
",";
"," -> ArithExpr;
"," -> ExprAmb1;
Expr;
ReptParams;
Expr;
Expr -> ArithExpr;
Expr -> ExprAmb1;
Expr -> ",";
Expr -> Expr;
Expr -> ReptParams;
ReptParams;
"counter";
"counter" -> ReptVariable;
"counter" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "f1";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"float";
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
"*";
"x";
"x" -> ReptVariable;
"x" -> FactorAmb2;
FactorAmb1;
"b";
"b" -> ReptVariable;
"b" -> FactorAmb2;
FactorAmb1;
"result";
"result" -> ReptVariable;
"result" -> FactorAmb2;
FactorAmb1;
MultOp;
MultOp -> "*";
MultOp -> "x";
MultOp -> FactorAmb1;
Factor;
RightRecTerm;
"+";
Factor;
Factor -> "c";
Factor -> FactorAmb1;
RightRecTerm;
"result";
"result" -> ReptVariable;
"result" -> FactorAmb2;
FactorAmb1;
"A";
"A" -> ReptVariable;
"A" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "B";
Factor -> FactorAmb1;
RightRecTerm;
"new_function";
"new_function" -> ReptVariable;
"new_function" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "A";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"=";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
",";
"," -> ArithExpr;
"," -> ExprAmb1;
"," -> ",";
"," -> Expr;
"," -> ReptParams;
Expr;
ReptParams;
ReptVariable;
FactorAmb2;
"f1";
"f1" -> ReptVariable;
"f1" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "f2";
Factor -> FactorAmb1;
RightRecTerm;
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
"*";
"x";
"x" -> ReptVariable;
"x" -> FactorAmb2;
FactorAmb1;
"c";
"c" -> ReptVariable;
"c" -> FactorAmb2;
FactorAmb1;
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
"B";
"B" -> ReptVariable;
"B" -> FactorAmb2;
FactorAmb1;
ReptVariable;
FactorAmb2;
"A";
"A" -> ReptVariable;
"A" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "B";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
Factor;
Factor -> "new_function";
Factor -> FactorAmb1;
RightRecTerm;
Factor;
Factor -> "2";
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
",";
"," -> ArithExpr;
"," -> ExprAmb1;
Expr;
ReptParams;
ReptVariable;
ReptVariable -> ".";
ReptVariable -> Id;
ReptVariable -> FactorAmb1;
FactorAmb2;
"f2";
"f2" -> ReptVariable;
"f2" -> FactorAmb2;
FactorAmb1;
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
ReptVariable;
FactorAmb2;
"B";
"B" -> ReptVariable;
"B" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "C";
Factor -> FactorAmb1;
RightRecTerm;
"new_function";
"new_function" -> ReptVariable;
"new_function" -> FactorAmb2;
FactorAmb1;
"2";
Factor;
Factor -> "3.5";
RightRecTerm;
Factor;
Factor -> Sign;
Factor -> Factor;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
".";
"." -> "(";
"." -> Params;
"." -> CloseParen;
"." -> FactorAmb2;
Id;
FactorAmb1;
ReptVariable;
ReptVariable -> ".";
ReptVariable -> Id;
ReptVariable -> FactorAmb1;
FactorAmb2;
ReptVariable;
FactorAmb2;
"C";
"C" -> ReptVariable;
"C" -> FactorAmb2;
FactorAmb1;
ReptVariable;
FactorAmb2;
"3.5";
Sign;
Sign -> "-";
Sign -> "2.0";
Factor;
Factor;
Factor -> "1.0";
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"(";
"(" -> Expr;
"(" -> ReptParams;
Params;
CloseParen;
FactorAmb2;
".";
"." -> "(";
"." -> Params;
"." -> CloseParen;
"." -> FactorAmb2;
Id;
FactorAmb1;
ReptVariable;
FactorAmb2;
"-";
"2.0";
"1.0";
Factor;
Factor -> "0.0";
RightRecTerm;
Expr;
Expr -> ArithExpr;
Expr -> ExprAmb1;
ReptParams;
"(";
"(" -> Expr;
"(" -> ReptParams;
Params;
CloseParen;
FactorAmb2;
"0.0";
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
Expr;
Expr -> ArithExpr;
Expr -> ExprAmb1;
ReptParams;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
ArithExpr;
ArithExpr -> Term;
ArithExpr -> RightRecArithExpr;
ExprAmb1;
Factor;
Factor -> "counter";
Factor -> FactorAmb1;
RightRecTerm;
Term;
Term -> Factor;
Term -> RightRecTerm;
RightRecArithExpr;
"counter";
"counter" -> ReptVariable;
"counter" -> FactorAmb2;
FactorAmb1;
Factor;
Factor -> "counter";
Factor -> FactorAmb1;
RightRecTerm;
ReptVariable;
FactorAmb2;
"counter";
"counter" -> ReptVariable;
"counter" -> FactorAmb2;
FactorAmb1;
ReptVariable;
FactorAmb2;
}