digraph LexerFA {
    start;
    start -> start [label="space"];
    start-> 1 [label="alpha"];
    1 -> 1 [label="alphanumeric | _"];

    1 -> keyword [label="matches exactly", fontname="Times-Italic"];
    keyword [peripheries=2,color=red];

    1 -> id;
    id [peripheries=2,color=red];
    1 -> INVALIDID [label="any else",fontname="Times-Italic"];
    INVALIDID [peripheries=2,color=red,fontname="Times-Bold"];

    start -> 12 [label="0"];
    12 -> INT;
    12 -> INVALIDNUM [label="digit"];
    12 -> 13 [label="."] // 0.fraction
    13 -> 13 [label="[1-9]"];
    13 -> 14 [label="0"];
    14 -> 14 [label="0"];
    14 -> 13 [label="[1-9]"];
    14 -> INVALIDNUM;
    13 -> FLOAT;
    13 -> 15 [label="e"];
    15 -> 16 [label="+ | - | nothing"];
    16 -> 17 [label="0"];
    17 -> FLOAT;
    17 -> INVALIDNUM [label="any",fontname="Times-Italic"];
    16 -> 18 [label="[1-9]"];
    18 -> 18 [label="digit"];
    18 -> FLOAT;

    start ->  19 [label="[1-9]"]; // can be integer or float
    19 -> 19 [label="digit"];
    19 -> INT;
    19 -> 13 [label="."];

    INT [peripheries=2,color=red];
    FLOAT [peripheries=2,color=red];
    INVALIDNUM [peripheries=2,color=red,fontname="Times-Bold"];

    start -> 2 [label="="] // can be assign or eq

    2 -> assign
    assign [peripheries=2,color=red];

    2 -> eq [label="="]
    eq [peripheries=2,color=red];

    start -> 3 [label="<"] // can be lt, let or noteq

    3 -> lt;
    lt [peripheries=2,color=red];

    3 -> let [label="="];
    let [peripheries=2,color=red];

    3 -> noteq [label=">"];
    noteq [peripheries=2,color=red];

    start -> 4 [label=">"] // can be gt or get

    4 -> gt;
    gt [peripheries=2,color=red];

    4 -> get [label="="]
    get [peripheries=2,color=red];

    start -> plus [label="+"]
    plus [peripheries=2,color=red];

    start -> minus [label="-"]
    minus [peripheries=2,color=red];

    start -> mult [label="*"]
    mult [peripheries=2,color=red];

    start -> 8 [label="/"] // can be division single line comment or multiline comment

    8 -> div;
    div [peripheries=2,color=red];

    8 -> 9 [label="/"];
    9 -> 9 [label="any",fontname="Times-Italic"];
    9 -> linecomment [label="line end",fontname="Times-Italic"];
    linecomment [peripheries=2,color=red];

    8 -> 10 [label="*"];
    10 -> 10 [label="any",fontname="Times-Italic"];
    10 -> 11 [label="*"];
    11 -> INVALIDCHAR [label="any else",fontname="Times-Italic"];
    INVALIDCHAR [peripheries=2,color=red,fontname="Times-Bold"];
    11 -> multilinecomment [label="/"];
    multilinecomment [peripheries=2,color=red];


    start -> or [label="|"]
    or [peripheries=2,color=red];

    start -> and [label="&"]
    and [peripheries=2,color=red];

    start -> bang [label="!"]
    bang [peripheries=2,color=red];

    start -> quest [label="?"]
    quest [peripheries=2,color=red];

    start -> openparen [label="("]
    openparen [peripheries=2,color=red];

    start -> closeparen [label=")"]
    closeparen [peripheries=2,color=red];

    start -> opencurly [label="{"]
    opencurly [peripheries=2,color=red];

    start -> closecurly [label="}"]
    closecurly [peripheries=2,color=red];

    start -> opensquare [label="["]
    opensquare [peripheries=2,color=red];

    start -> closesquare [label="]"];
    closesquare [peripheries=2,color=red];

    start -> semicolon [label=";"];
    semicolon [peripheries=2,color=red];

    start -> comma [label=","];
    comma [peripheries=2,color=red];

    start -> period [label="."];
    period [peripheries=2,color=red];

    start -> INVALIDCHAR [label="any else"];
}